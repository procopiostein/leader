<!-- Follow leader using riskrrt -->
<!-- author: Procopio -->
<!-- usage: scenario:=xxxx to change the scenario -->
<!-- each scenario has a folder inside world folder, and it must have -->
<!-- the following files: map.yaml, image.pgm, scenario.world and social_filter.launch -->

<!-- usage: move_base:=0 to use RiskRRT home-made executor -->

<launch>

  <param name="/use_sim_time" value="true" /> 
  <arg name="scenario" default="ua15" />
  <arg name="log" default="" />
  
  ## Publish map
  <node pkg="map_server" type="map_server" name="map_server" output="screen" args="$(find human_leader)/world/$(arg scenario)/map.yaml" respawn="false" >
    <param name="frame_id" value="/map" />
  </node>
 
  ## Start stage
  <node pkg="stage" type="stageros" name="stageros" args="$(find human_leader)/world/$(arg scenario)/scenario.world" respawn="false" output="screen">
    <param name="base_watchdog_timeout" value="0.2"/>
  </node>
  
  ## initialize amcl
  <include file="$(find human_leader)/launch/amcl.launch"/>
  
  ## scenario specifics
  <include file="$(find human_leader)/world/$(arg scenario)/scenario_specific.launch"/>
  
  ## rviz
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find human_leader)/conf/follow_leader.rviz" />
  <!--   <node pkg="rviz" type="rviz" name="rviz" args="-d $(find human_leader)/conf/ua_nav.vcg" /> -->
  
  ## classifier
  <node pkg="human_leader" type="classify_features" name="classifier" args="$(find process_target)/trained_boost.xml" />
  
  ## leader manager and follower -->
  <node pkg="human_leader" type="leader_follower_class" name="leader_follower_class" output="screen"/>
  
  ### RiskRRT
  <node pkg="RiskRRT" type="rosplanner_static" name="rosplanner_static" args="$(find RiskRRT)/planning.config $(find RiskRRT)/wheelchair.config  $(arg log)" output="screen" />
  <node pkg="RiskRRT" type="rosexecWheelchair" name="rosexecWheelchair" args="$(find RiskRRT)/planning.config $(find RiskRRT)/wheelchair.config" output="screen" respawn="true"/>

  ### move_base  
  <node pkg="move_base" type="move_base" respawn="false" name="move_base_node" output="screen">
    <remap from="map" to="/map" />        
<!--     <remap from="/robot_0/move_base_simple/goal" to="/robot_0/goal"/> ## to be used with send_goal -->
    <remap from="/move_base_simple/goal" to="/follow_leader_pose"/> ## to be used with send_goal
    <param name="base_local_planner" value="pose_follower/PoseFollower"/>
    <param name="base_global_planner" value="goal_passer/GoalPasser"/>
    <param name="controller_frequency" value="10.0" />
    <rosparam file="$(find wheelchair)/move_base_config/sim_costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find wheelchair)/move_base_config/sim_costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find wheelchair)/move_base_config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find wheelchair)/move_base_config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find wheelchair)/move_base_config/base_local_planner_params.yaml" command="load" />
  </node>

  
</launch>
